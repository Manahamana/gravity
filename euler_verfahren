import math
import cmath
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.animation
import sigma

def f(x):
    return (x+1)**(-2) * np.sin(2*np.pi*x)
startwert = 1
def euler(x, y0, fx):
    
    N = len(x)-1
    y = np.zeros(N+1)
    y[0] = y0
    dy = fx(x) # Ableitungen von y an Stellen x_k
    h = (x[len(x)-1] - x[0])/N
    for k in range(N):
        y[k+1] = y[k] + h*dy[k]
    return y
fig, ax = plt.subplots()
for n in [10000, 1000, 200, 50, 20]:
    x = np.linspace(0, 100, n+1)
    y = euler(x, startwert, f)
    ax.plot(x, y, label='N='+str(n))
ax.set_xlabel('x')
ax.set_ylabel('y(x)')
ax.set_title("Eulerverfahren")
ax.legend()
plt.show()